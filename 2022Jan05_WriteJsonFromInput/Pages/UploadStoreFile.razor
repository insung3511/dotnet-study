@page "/UploadStoreFile"
@using System.IO
@using System.Text.Json
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@using WriteJsonFromInput.Data
@inject IWebHostEnvironment env

<h1>Blazor Server File upload (store on server)</h1>
<code>@DefaultMessage</code>
<code>@jsonMessage</code>

<div>
    <EditForm EditContext="@editContext" OnValidSubmit="@onValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <!--Input File-->
        <div>
            <p>Available upload file type list : .mp4 .avi .mov .wmv</p>
            <p>And also please upload only video file. It could be got some error.</p>
            <InputFile OnChange="OnInputFileChange" />
        </div>

        <!--Input blog title-->
        <div>
            <label>게시물 제목 : </label>
            <InputText @bind-Value="@blog.BlogTitle" />
            <ValidationMessage For="@(()=>blog.BlogTitle)" />
        </div>

        <!--Input blog describtion-->
        <div>
            <label>게시물 설명 : </label>
            <InputText @bind-Value="@blog.BlogSubTitle" />
            <ValidationMessage For="@(()=>blog.BlogSubTitle)" />
        </div>

        <!--Input blog homework bool-->
        <div>
            <label>과제 유무 : </label>
            <InputCheckbox @bind-Value="@blog.BlogHomework" />
            <ValidationMessage For="@(()=>blog.BlogHomework)" />
        </div>

        <div class="text-center">
            <button type="submit" class="btn btn-primary mr-1">Submit</button>
        </div>
    </EditForm>
</div>

<div>
    <video controls width="250">
        <source src="@filePath" />
        Sorry, your broswer doesn't support embedded videos.
    </video>
</div>

@code {
    string DefaultMessage = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    private int maxFileSize = 1024 * 45;
    private Blog blog = new Blog();
    private EditContext editContext { get; set; }
    private string jsonPath = @"wwwroot/Data/boardList.json";
    private string jsonMessage = "";
    private string ContentWrite = "";
    private bool fileUploadSuccess = false;
    private int fileCount = 0;
    private string filePath = "";

    protected override void OnInitialized()
    {
        editContext = new EditContext(blog);
    }

    private void onReset()
    {
        editContext = new EditContext(blog);
    }

    private async void onValidSubmit()
    {
        foreach (var file in selectedFiles)
        {
            Stream stream = file.OpenReadStream(maxAllowedSize: 1073741824000);
            var path = $"{env.WebRootPath}//UploadedData//{file.Name}";
            filePath = path.ToString();
            FileStream fs = File.Create(path);

            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
            fileUploadSuccess = true;
        }

        DefaultMessage = $"{selectedFiles.Count} file(s) uploaded on server";
        this.StateHasChanged();

        if (fileUploadSuccess)
        {
            blog.BlogCreatedTime = DateTime.UtcNow;
            blog.BlogId = 0;
            blog.Uploaded = true;
            blog.FileCount = fileCount;
            jsonMessage = JsonSerializer.Serialize(blog);
            using (TextWriter tw = new StreamWriter(jsonPath))
            {
                tw.WriteLine(jsonMessage);
            }
        }

        else
        {
            blog.Uploaded = false;
            DefaultMessage = "Sorry. Somthing problem with file upload and input things. Try again or contact to admin";
            jsonMessage = JsonSerializer.Serialize(blog);
            using (TextWriter tw = new StreamWriter(jsonPath))
            {
                tw.WriteLine(jsonMessage);
            }
        }
    }


    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles(maxFileSize);
        DefaultMessage = $"{selectedFiles} file(s) selected";
        this.StateHasChanged();
        fileCount = e.FileCount;
    }

    private async void OnSubmit()
    {
        foreach (var file in selectedFiles)
        {
            Stream stream = file.OpenReadStream();
            var path = $"{env.WebRootPath}//UploadedData//{file.Name}";
            FileStream fs = File.Create(path);

            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
        }

        DefaultMessage = $"{selectedFiles.Count} file(s) uploaded on server";
        this.StateHasChanged();
    }
} 